local nttp = require "nttp.nttp"
local Option = nttp.variant.Option

---### datastar
---`
local datastar = @record{}
---`

---### datastar.ServerSentEventGenerator
---`
local datastar.ServerSentEventGenerator = @record{
  server: *nttp.Server,
  resp: nttp.Response
}
---`

local function send_session(self: *nttp.Server, resp: *nttp.Response)
  if self.session.send then
    local sb: stringbuilder
    for k, v in pairs(self.session.vals) do
      sb:write(("%s=%s; "):format(k, v))
    end
    sb:rollback(1)
    local session_map = nttp.utils.b64_encode(sb:promote())
    local val = session_map .. "///" .. nttp.utils.b64_encode(nttp.utils.sign(self.config.secret, session_map))
    resp:set_cookie({
      name = self.config.session_name,
      val = val
    })
    self.session.send = false
  end
end

---### datastar.ServerSentEventGenerator.new
---`
function datastar.ServerSentEventGenerator.new(server: *nttp.Server, resp: nttp.Response): (datastar.ServerSentEventGenerator, string)
---`
  if server == nilptr then
    return  {}, "Server was a nilptr"
  end

  send_session(server, resp)

  resp.status = 200
  resp.content_type = "text/event-stream"
  local err = resp:set_header("Content-Length", "")
  if err ~= "" then
    return {}, err
  end
  local err = resp:set_header("Cache-Control", "nocache")
  if err ~= "" then
    return {}, err
  end
  local err = resp:set_header("Connection", "keep-alive")
  if err ~= "" then
    return {}, err
  end

  local err = server:write(resp:tostring())
  if err ~= "" then
    return {}, err
  end
  server.written = true
  return { server = server, resp = resp }, ""
end

local EventType = @enum{
  PatchElements = 0,
  PatchSignals,
}

local function event_type_text(e_type: EventType): string
  switch e_type do
    case EventType.PatchElements then
      return "datastar-patch-elements"
    case EventType.PatchSignals then
      return "datastar-patch-signals"
  end
  return "UNKNOWN EventType: " .. e_type
end

local SendOpts = @record{
  event_id: string,
  retry_duration: uinteger
}

local function send(
  self: *datastar.ServerSentEventGenerator,
  event: EventType,
  data: sequence(string),
  opts: facultative(SendOpts)
): string
  local sb: stringbuilder

  sb:write(("event: %s\n"):format(event_type_text(event)))
  ## if not opts.type.is_niltype then
    if opts.event_id ~= "" then
      sb:write(("id: %s\n"):format(opts.event_id))
    end
    if opts.retry_duration ~= 0 and opts.retry_duration ~= 1000 then
      sb:write(("retry: %d\n"):format(opts.retry_duration))
    end
  ## end
  for i, v in ipairs(data) do
    sb:write(("data: %s\n"):format(v))
  end
  sb:write("\n")

  local final = sb:promote()
  local err = self.server:write(final)
  self.server.written = err == ""
  if err ~= "" then
    return err
  end

  return ""
end

---### datastar.ElementPatchMode
---`
local datastar.ElementPatchMode = @enum{
  null = -1,
  Inner,
  Outer,
  Replace,
  Prepend,
  Append,
  Before,
  After,
  Remove,
}
---`

local function element_patch_mode_text(epm: datastar.ElementPatchMode): string
  switch epm do
    case datastar.ElementPatchMode.Inner then
      return "inner"
    case datastar.ElementPatchMode.Outer then
      return "outer"
    case datastar.ElementPatchMode.Replace then
      return "replace"
    case datastar.ElementPatchMode.Prepend then
      return "prepend"
    case datastar.ElementPatchMode.Append then
      return "append"
    case datastar.ElementPatchMode.Before then
      return "before"
    case datastar.ElementPatchMode.After then
      return "after"
    case datastar.ElementPatchMode.Remove then
      return "remove"
  end
  return "UNKNOWN ElementPatchMode: " .. epm
end

---### datastar.PatchElementsOpts
---`
local datastar.PatchElementsOpts = @record{
  selector: string,
  mode: datastar.ElementPatchMode,
  use_view_transition: boolean,
  event_id: string,
  retry_duration: uinteger
}
---`

---### datastar.ServerSentEventGenerator:patch_elements
---`
function datastar.ServerSentEventGenerator:patch_elements(
  elements: string,
  opts: facultative(datastar.PatchElementsOpts)
): string
---`
  local data: sequence(string)
  ## if not opts.type.is_niltype then
    local send_opts: SendOpts = {
      event_id = opts.event_id,
      retry_duration = opts.retry_duration,
    }
    if opts.mode > datastar.ElementPatchMode.null then
      data:push(("mode %s"):format(element_patch_mode_text(opts.mode)))
    end
    if opts.selector ~= "" then
      data:push(("selector %s"):format(opts.selector))
    end
    if opts.use_view_transition then
      data:push("useViewTransition true")
    end
  ## else
    local send_opts = nil
  ## end
  for _, line in string.gmatch(elements .. "\n", "([^\r\n]+)\r?\n") do
    data:push(("elements %s"):format(line[0]))
  end

  return send(self, EventType.PatchElements, data, send_opts)
end

---### datastar.RemoveElementsOpts
---`
local datastar.RemoveElementsOpts = @record{
  use_view_transition: boolean,
  event_id: string,
  retry_duration: uinteger
}
---`

---### datastar.ServerSentEventGenerator:remove_elements
---`
function datastar.ServerSentEventGenerator:remove_elements(
  selector: string,
  opts: facultative(datastar.RemoveElementsOpts)
): string
---`
  local patch_el_opts: datastar.PatchElementsOpts = {
    selector = selector,
    mode = datastar.ElementPatchMode.Remove
  }
  ## if not opts.type.is_niltype then
    patch_el_opts.event_id = opts.event_id
    patch_el_opts.retry_duration = opts.retry_duration
    patch_el_opts.use_view_transition = opts.use_view_transition
  ## end

  return self:patch_elements("", patch_el_opts)
end

---### datastar.PatchSignalsOpts
---`
local datastar.PatchSignalsOpts = @record{
  only_if_missing: boolean,
  event_id: string,
  retry_duration: uinteger
}
---`

---### datastar.ServerSentEventGenerator:patch_signals
---`
function datastar.ServerSentEventGenerator:patch_signals(
  signals: string,
  opts: facultative(datastar.PatchSignalsOpts)
): string
---`
  local data: sequence(string)

  ## if not opts.type.is_niltype then
    local send_opts: SendOpts = {
      event_id = opts.event_id,
      retry_duration = opts.retry_duration,
    }
    if opts.only_if_missing then
      data:push("onlyIfMissing true")
    end
  ## else
    local send_opts = nil
  ## end

  data:push(("signals %s"):format(signals))

  return send(self, EventType.PatchSignals, data, send_opts)
end

---### datastar.ExecuteScriptOpts
---`
local datastar.ExecuteScriptOpts = @record{
  auto_remove: boolean,
  attributes: sequence(string),
  event_id: string,
  retry_duration: uinteger
}
---`

---### datastar.ServerSentEventGenerator:execute_script
---`
function datastar.ServerSentEventGenerator:execute_script(
  script: string,
  opts: facultative(datastar.ExecuteScriptOpts)
): string
---`

  local sb: stringbuilder
  sb:write("<script")
  local patch_el_opts: datastar.PatchElementsOpts = {
    selector = "body",
    mode = datastar.ElementPatchMode.Append
  }
  ## if not opts.type.is_niltype then
    patch_el_opts.event_id = opts.event_id
    patch_el_opts.retry_duration = opts.retry_duration
    for _, v in ipairs(opts.attributes) do
      sb:writef(" %s", v)
    end
    if opts.auto_remove then
      sb:write(' data-effect="el.remove()"')
    end
  ## end
  sb:writef(">%s</script>", script)
  local elements = sb:promote()
  return self:patch_elements(elements, patch_el_opts)
end

---### datastar.ServerSentEventGenerator:redirect
---`
function datastar.ServerSentEventGenerator:redirect(path: string)
---`
  self:execute_script(('setTimeout(() => window.location = "%s")'):format(path), { auto_remove = true })
end

---### datastar.read_signals
---`
function datastar.read_signals(server: *nttp.Server): (nttp.json.JsonNode, string)
---`
  if server.req.method == "GET" then
    local signals = server.req.params["datastar"]
    return nttp.json.parse_string(signals)
  else
    return nttp.json.parse_string(server.req.body)
  end
end

---### datastar.csrf
---`
function datastar.csrf(server: *nttp.Server): Option(nttp.Response)
---`
  local signals, err = datastar.read_signals(server)
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return Option.Some(server:error())
  end
  local obj = signals:get_obj()
  if not obj:has("csrf_token") then
    io.stderr:write("No csrf_token\n")
    return Option.Some(server:error())
  end
  local csrf_token = obj["csrf_token"]:get_str()
  if csrf_token ~= server.session:get_val("csrf_token") then
    return Option.Some(server:text(nttp.Status.Forbidden, "forbidden"))
  end
  return Option.None()
end

return datastar
